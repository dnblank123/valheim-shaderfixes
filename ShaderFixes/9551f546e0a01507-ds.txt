// ds terrain
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.4.1 on Wed Nov  6 02:27:00 2024
//
//
// Patch Constant signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TessFactor            0   x           0  TRIEDGE   float
// SV_TessFactor            1   x           1  TRIEDGE   float
// SV_TessFactor            2   x           2  TRIEDGE   float
// SV_InsideTessFactor      0   x           3   TRIINT   float
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// INTERNALTESSPOS          0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz
// TEXCOORD                 0   xyzw        2     NONE   float   xy
// TEXCOORD                 1   xyzw        3     NONE   float
// COLOR                    0   xyzw        4     NONE   float   xyzw
// TANGENT                  0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyz         7     NONE   float   xyz
//
ds_5_0
dcl_input_control_point_count 3
dcl_tessellator_domain domain_tri
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[20], immediateIndexed
dcl_constantbuffer CB1[5], immediateIndexed
dcl_constantbuffer CB2[46], immediateIndexed
dcl_constantbuffer CB3[10], immediateIndexed
dcl_constantbuffer CB4[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input vDomain.xyz
dcl_input vicp[3][0].xyzw
dcl_input vicp[3][1].xyz
dcl_input vicp[3][2].xy
dcl_input vicp[3][4].xyzw
dcl_input vicp[3][5].xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyz
dcl_temps 4
mul r0.xy, vDomain.yyyy, vicp[1][2].xyxx
mad r0.xy, vicp[0][2].xyxx, vDomain.xxxx, r0.xyxx
mad r0.xy, vicp[2][2].xyxx, vDomain.zzzz, r0.xyxx
ge r0.zw, l(0.000000, 0.000000, 0.010000, 0.010000), r0.xxxy
ge r1.xy, r0.xyxx, l(0.990000, 0.990000, 0.000000, 0.000000)
or r0.z, r0.z, r1.x
or r0.z, r0.w, r0.z
or r0.z, r1.y, r0.z
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
mad o1.xy, r0.xyxx, cb0[19].xyxx, cb0[19].zwzz
// add r0.x, r1.y, r1.x
// mad_sat r0.x, r1.z, l(10.000000), r0.x
// add r0.x, -r0.x, l(1.000000)
mul r2.xyzw, vDomain.yyyy, vicp[1][4].xyzw
mad r2.xyzw, vicp[0][4].xyzw, vDomain.xxxx, r2.xyzw
mad r2.xyzw, vicp[2][4].xyzw, vDomain.zzzz, r2.xyzw
add r1.xyz, r2.yxwy, l(-1.000000, -1.000000, -1.000000, 0.000000)
// max r0.yw, |r1.xxxy|, |r2.xxxy|
// max r0.yw, |r2.zzzz|, r0.yyyw
// max r0.y, |r2.w|, r0.y
// max r0.w, |r1.z|, r0.w
// add r0.yw, -r0.yyyw, l(0.000000, 1.000000, 0.000000, 1.000000)
mov o5.xyzw, r2.xyzw
// max r0.yw, r0.yyyw, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r1.xyz, vDomain.yyyy, vicp[1][1].xyzx
mad r1.xyz, vicp[0][1].xyzx, vDomain.xxxx, r1.xyzx
mad r1.xyz, vicp[2][1].xyzx, vDomain.zzzz, r1.xyzx
add r2.x, r1.y, l(-0.850000)
// mul_sat r2.x, r2.x, l(20.000019)
// mad r2.y, r2.x, l(-2.000000), l(3.000000)
mul r2.x, r2.x, r2.x
mul r2.x, r2.x, r2.y
mul r0.y, r0.y, r2.x
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, l(0.100000)
movc r0.x, r0.z, l(0), r0.x
mul r2.xyzw, vDomain.yyyy, vicp[1][0].xyzw
mad r2.xyzw, vicp[0][0].xyzw, vDomain.xxxx, r2.xyzw
mad r2.xyzw, vicp[2][0].xyzw, vDomain.zzzz, r2.xyzw
add r0.x, r0.x, r2.y

// height related
// mad r0.x, r0.w, l(0.100000), r0.x
// mul r0.y, r0.w, r1.w
// mad r0.x, r0.y, l(0.800000), r0.x
// mul r0.yz, r2.yyyy, cb3[1].xxzx
// mad r0.yz, cb3[0].xxzx, r2.xxxx, r0.yyzy
// mad r0.yz, cb3[2].xxzx, r2.zzzz, r0.yyzy
// add r0.yz, r0.yyzy, cb3[3].xxzx
// add r0.yz, r0.yyzy, -cb1[4].xxzx

// height related
// dp2 r0.y, r0.yzyy, r0.yzyy
// sqrt r0.y, r0.y
add r0.y, r0.y, l(-100.000000)
mul_sat r0.y, r0.y, l(0.005000)
// mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
// dp2 r0.y, r0.zzzz, r0.yyyy
// add r0.z, r0.y, r0.x
// add r0.y, -r0.y, r0.x
// lt r0.x, cb0[13].w, r0.x
// movc r0.x, r0.x, r0.z, r0.y
mul r0.xyzw, r0.xxxx, cb3[1].xyzw
mad r0.xyzw, cb3[0].xyzw, r2.xxxx, r0.xyzw
mad r0.xyzw, cb3[2].xyzw, r2.zzzz, r0.xyzw
mad r2.xyz, cb3[3].xyzx, r2.wwww, r0.xyzx
add r0.xyzw, r0.xyzw, cb3[3].xyzw
mul r3.xyzw, r0.yyyy, cb4[18].xyzw
mad r3.xyzw, cb4[17].xyzw, r0.xxxx, r3.xyzw
mad r3.xyzw, cb4[19].xyzw, r0.zzzz, r3.xyzw
mad o0.xyzw, cb4[20].xyzw, r0.wwww, r3.xyzw
mov o2.w, r2.x

// dp3 r0.x, r1.xyzx, cb3[4].xyzx
// dp3 r0.y, r1.xyzx, cb3[5].xyzx
// dp3 r0.z, r1.xyzx, cb3[6].xyzx
mul r0.x, r1.xyzx, cb3[4].xyzx
mul r0.y, r1.xyzx, cb3[5].xyzx
mul r0.z, r1.xyzx, cb3[6].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w

mul r0.xyzw, r0.wwww, r0.xyzz
mul r1.xyzw, vDomain.yyyy, vicp[1][5].xyzw
mad r1.xyzw, vicp[0][5].xyzw, vDomain.xxxx, r1.xyzw
mad r1.xyzw, vicp[2][5].xyzw, vDomain.zzzz, r1.xyzw
mul r3.xyz, r1.yyyy, cb3[1].yzxy
mad r3.xyz, cb3[0].yzxy, r1.xxxx, r3.xyzx
mad r1.xyz, cb3[2].yzxy, r1.zzzz, r3.xyzx
mul r1.w, r1.w, cb3[9].w
dp3 r2.x, r1.xyzx, r1.xyzx
rsq r2.x, r2.x
// mul r1.xyz, r1.xyzx, r2.xxxx
mul r3.xyz, r0.wxyw, r1.xyzx
mad r3.xyz, r0.ywxy, r1.yzxy, -r3.xyzx
mul r3.xyz, r1.wwww, r3.xyzx
mov o2.y, r3.x
mov o2.z, r0.x
mov o2.x, r1.z
mov o3.w, r2.y
mov o4.w, r2.z
mov o3.x, r1.x
mov o4.x, r1.y
mov o3.y, r3.y
mov o4.y, r3.z
mov o3.z, r0.y
mov o4.z, r0.w
// mov o6.xyzw, l(0,0,0,0)
// mul r1.x, r0.y, r0.y
// mad r1.x, r0.x, r0.x, -r1.x
// mul r0.xyzw, r0.ywzx, r0.xyzw
// dp4 r2.x, cb2[42].xyzw, r0.xyzw
// dp4 r2.y, cb2[43].xyzw, r0.xyzw
// dp4 r2.z, cb2[44].xyzw, r0.xyzw
// mad o7.xyz, cb2[45].xyzx, r1.xxxx, r2.xyzx
ret
// Approximately 0 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.4.1 on Wed Nov  6 02:27:00 2024
// Texture2D<float4> t0 : register(t0);
//
// SamplerState s0_s : register(s0);
//
// cbuffer cb4 : register(b4)
// {
//   float4 cb4[21];
// }
//
// cbuffer cb3 : register(b3)
// {
//   float4 cb3[10];
// }
//
// cbuffer cb2 : register(b2)
// {
//   float4 cb2[46];
// }
//
// cbuffer cb1 : register(b1)
// {
//   float4 cb1[5];
// }
//
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[20];
// }
//
//
//
//
// // 3Dmigoto declarations
// #define cmp -
//
//
// void main(
//   float4 v0 : INTERNALTESSPOS0,
//   float3 v1 : NORMAL0,
//   float4 v2 : TEXCOORD0,
//   float4 v3 : TEXCOORD1,
//   float4 v4 : COLOR0,
//   float4 v5 : TANGENT0,
//   out float4 o0 : SV_POSITION0,
//   out float4 o1 : TEXCOORD0,
//   out float4 o2 : TEXCOORD1,
//   out float4 o3 : TEXCOORD2,
//   out float4 o4 : TEXCOORD3,
//   out float4 o5 : COLOR0,
//   out float4 o6 : TEXCOORD5,
//   out float3 o7 : TEXCOORD6)
// {
