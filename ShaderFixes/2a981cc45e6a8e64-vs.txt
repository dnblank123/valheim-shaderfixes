// // vs vegetation
// // 000000000BA0 â€“ 000000000960 = 240 reduction
// // gfx 900
// cbuffer cb6 : register(b6)
// {
  // float4 cb6[14];
// }

// cbuffer cb5 : register(b5)
// {
  // float4 cb5[16];
// }

// cbuffer cb4 : register(b4)
// {
  // float4 cb4[1];
// }

// cbuffer cb3 : register(b3)
// {
  // float4 cb3[21];
// }

// cbuffer cb2 : register(b2)
// {
  // float4 cb2[10];
// }

// cbuffer cb1 : register(b1)
// {
  // float4 cb1[1];
// }

// cbuffer cb0 : register(b0)
// {
  // float4 cb0[21];
// }




// // 3Dmigoto declarations
// #define cmp -


// void main(
  // float4 v0 : POSITION0,
  // float4 v1 : TANGENT0,
  // float3 v2 : NORMAL0,
  // float4 v3 : TEXCOORD0,
  // float4 v4 : TEXCOORD1,
  // float4 v5 : TEXCOORD2,
  // float4 v6 : TEXCOORD3,
  // float4 v7 : COLOR0,
  // uint v8 : SV_InstanceID0,
  // out float4 o0 : SV_POSITION0,
  // out float4 o1 : TEXCOORD0,
  // out float4 o2 : TEXCOORD1,
  // out float4 o3 : TEXCOORD2,
  // out float4 o4 : TEXCOORD3,
  // out float4 o5 : TEXCOORD4,
  // out float4 o6 : TEXCOORD5,
  // out float4 o7 : TEXCOORD6,
  // out float4 o8 : TEXCOORD8,
  // out float3 o9 : TEXCOORD9,
  // out uint o10 : SV_InstanceID0)
// {
  // float4 r0,r1,r2,r3,r4,r5,r6,r7;
  // uint4 bitmask, uiDest;
  // float4 fDest;
  // // optimizing cb5 gonna be pain since its related to instancing
  // r0.x = (int)v8.x + asint(cb4[0].x);
  // r0.y = (uint)r0.x << 3;
  // r0.z = saturate(v0.y / cb0[5].x);
  // r0.w = saturate(v4.y);
  // r0.z = cb0[9].w ? r0.w : r0.z;
  // r0.w = r0.z * r0.z;
  // r1.xyz = cb5[r0.y+5].xyz * cb0[16].yyy;
  // r1.xyz = cb5[r0.y+4].xyz * cb0[16].xxx + r1.xyz;
  // r1.xyz = cb5[r0.y+6].xyz * cb0[16].zzz + r1.xyz;
  // r1.w = cb0[16].w * 0.5 + 0.5;
  // r2.xy = cb0[5].yw * r1.ww;
  // r2.zw = cb1[0].xx * r2.xy;
  // r1.w = cb1[0].x * r2.x + cb5[r0.y+3].x;
  // r1.w = sin(r1.w);
  // r3.xyz = r1.xyz * r1.www;
  // r1.w = r2.z * 0.612339973 + cb5[r0.y+3].z;
  // r1.w = sin(r1.w);
  // r3.xyz = r3.xyz * r1.www;
  // r3.xyz = cb0[5].zzz * r3.xyz;
  // r3.xyz = r3.xyz * r0.www;
  // r1.xyz = cb0[5].zzz * r1.xyz;
  // r1.xyz = r1.xyz * r0.www;
  // r1.xyz = cb0[16].www * r1.xyz;
  // r1.xyz = float3(0.5,0.5,0.5) * r1.xyz;
  // r1.xyz = r3.xyz * cb0[16].www + r1.xyz;
  // r3.xyz = cb5[r0.y+5].xyz * cb0[17].yyy;
  // r3.xyz = cb5[r0.y+4].xyz * cb0[17].xxx + r3.xyz;
  // r3.xyz = cb5[r0.y+6].xyz * cb0[17].zzz + r3.xyz;
  // r1.w = cb0[17].w * 0.5 + 0.5;
  // r2.xz = cb0[5].yw * r1.ww;
  // r4.xy = cb1[0].xx * r2.xz;
  // r1.w = cb1[0].x * r2.x + cb5[r0.y+3].x;
  // r1.w = sin(r1.w);
  // r5.xyz = r3.xyz * r1.www;
  // r1.w = r4.x * 0.612339973 + cb5[r0.y+3].z;
  // r1.w = sin(r1.w);
  // r4.xzw = r5.xyz * r1.www;
  // r4.xzw = cb0[5].zzz * r4.xzw;
  // r4.xzw = r4.xzw * r0.www;
  // r3.xyz = cb0[5].zzz * r3.xyz;
  // r3.xyz = r3.xyz * r0.www;
  // r3.xyz = cb0[17].www * r3.xyz;
  // r3.xyz = float3(0.5,0.5,0.5) * r3.xyz;
  // r3.xyz = r4.xzw * cb0[17].www + r3.xyz;
  // r3.xyz = r3.xyz + -r1.xyz;
  // r1.xyz = cb0[18].xxx * r3.xyz + r1.xyz;
  // r0.w = dot(v0.xyz, v0.xyz);
  // r0.w = sqrt(r0.w);
  // r1.xyz = v0.xyz + r1.xyz;
  // r1.w = dot(r1.xyz, r1.xyz);
  // r1.w = rsqrt(r1.w);
  // r1.xyz = r1.xyz * r1.www;
  // r3.xy = float2(10,10) * v0.xz;
  // r1.w = dot(v0.xz, v0.xz);
  // r1.w = sqrt(r1.w);
  // r1.w = -cb0[6].y + r1.w;
  // r2.x = cb0[6].z + -cb0[6].y;
  // r1.w = saturate(r1.w / r2.x);
  // r4.xzw = cb1[0].xxx * r2.yyy + r3.xyy;
  // r4.xzw = v0.yxy * float3(10,10,10) + r4.xzw;
  // r4.xzw = sin(r4.xzw);
  // r2.x = r2.w * 0.612339973 + r3.x;
  // r2.x = v0.y * 10 + r2.x;
  // r2.x = sin(r2.x);
  // r2.xy = r4.xw * r2.xx;
  // r2.xy = cb0[6].xx * r2.xy;
  // r2.w = cb0[6].x * r4.z;
  // r5.xyz = r2.xwy * r1.www;
  // r2.xyw = cb0[16].www * r5.xyz;
  // r2.xyw = float3(0.100000001,0.0500000007,0.100000001) * r2.xyw;
  // r4.xzw = r2.xyw * r0.zzz;
  // r2.xyw = cb0[9].www ? r4.xzw : r2.xyw;
  // r3.yzw = cb1[0].xxx * r2.zzz + r3.xyy;
  // r3.yzw = v0.yxy * float3(10,10,10) + r3.yzw;
  // r3.yzw = sin(r3.yzw);
  // r2.z = r4.y * 0.612339973 + r3.x;
  // r2.z = v0.y * 10 + r2.z;
  // r2.z = sin(r2.z);
  // r3.xy = r3.yw * r2.zz;
  // r3.xy = cb0[6].xx * r3.xy;
  // r2.z = cb0[6].x * r3.z;
  // r4.y = r2.z * r1.w;
  // r4.xz = r3.xy * r1.ww;
  // r3.xyz = cb0[17].www * r4.xyz;
  // r3.xyz = float3(0.100000001,0.0500000007,0.100000001) * r3.xyz;
  // r4.xyz = r3.xyz * r0.zzz;
  // r3.xyz = cb0[9].www ? r4.xyz : r3.xyz;
  // r3.xyz = r3.xyz + -r2.xyw;
  // r2.xyz = cb0[18].xxx * r3.xyz + r2.xyw;
  // r1.xyz = r1.xyz * r0.www + r2.xyz;
  // r2.xyzw = cb5[r0.y+1].xyzw * r1.yyyy;
  // r2.xyzw = cb5[r0.y+0].xyzw * r1.xxxx + r2.xyzw;
  // r2.xyzw = cb5[r0.y+2].xyzw * r1.zzzz + r2.xyzw;
  // r2.xyzw = cb5[r0.y+3].xyzw * v0.wwww + r2.xyzw;
  // r0.w = cmp(0.5 < cb0[14].z);
  // r3.xyz = float3(0,1,0) + cb0[7].xyz;
  // r4.xyz = float3(0,1,0) + cb0[8].xyz;
  // r5.xyz = r4.zxy + -r3.zxy;
  // // r3.w = dot(r5.xyz, r5.xyz);
  // // r3.w = rsqrt(r3.w);
  // // r5.xyz = r5.xyz * r3.www;
  // // r6.xyz = -r3.xyz + r2.xyz;
  // // r7.xyz = -r4.xyz + r3.xyz;
  // // r3.w = dot(r7.xyz, r7.xyz);
  // // r3.w = sqrt(r3.w);
  // // r4.w = dot(r5.yzx, r6.xyz);
  // // r5.w = cmp(r4.w < 0);
  // // r6.w = cmp(r3.w < 0.00999999978);
  // // r5.w = (int)r5.w | (int)r6.w;
  // r3.xyz = r3.xyz + -r2.xyz;
  // r3.x = dot(r3.xyz, r3.xyz);
  // r3.y = cmp(r3.w < r4.w);
  // r4.xyz = r4.xyz + -r2.xyz;
  // // r3.z = dot(r4.xyz, r4.xyz);
  // // r3.xz = sqrt(r3.xz);
  // // r3.w = dot(r6.xyz, r6.xyz);
  // // r3.w = rsqrt(r3.w);
  // // r4.xyz = r6.zxy * r3.www;
  // // r7.xyz = r5.yzx * r4.xyz;
  // // r4.xyz = r5.xyz * r4.yzx + -r7.xyz;
  // // r7.xyz = r5.xyz * r4.xyz;
  // // r4.xyz = r5.zxy * r4.yzx + -r7.xyz;
  // // r3.w = dot(r4.xyz, r4.xyz);
  // // r3.w = rsqrt(r3.w);
  // // r4.xyz = r4.xyz * r3.www;
  // // r3.w = dot(r4.xyz, r6.xyz);
  // // r3.y = r3.y ? r3.z : abs(r3.w);
  // // r3.x = r5.w ? r3.x : r3.y;
  // // r3.yz = cb0[8].xz + -cb0[7].xz;
  // // r3.w = dot(r3.yz, r3.yz);
  // // r3.w = rsqrt(r3.w);
  // // r4.xy = r3.yz * r3.ww;
  // // r3.yz = -cb0[7].xz + r2.xz;
  // // r5.xy = -cb0[8].xz + cb0[7].xz;
  // // r3.w = dot(r5.xy, r5.xy);
  // // r3.w = sqrt(r3.w);
  // // r4.w = dot(r4.xy, r3.yz);
  // // r5.x = cmp(r4.w < 0);
  // // r5.y = cmp(r3.w < 0.00999999978);
  // // r5.x = (int)r5.y | (int)r5.x;
  // // r5.yz = cb0[7].xz + -r2.xz;
  // // r5.y = dot(r5.yz, r5.yz);
  // // r5.y = sqrt(r5.y);
  // // r3.w = cmp(r3.w < r4.w);
  // r5.zw = cb0[8].xz + -r2.xz;
  // r4.w = dot(r5.zw, r5.zw);
  // r4.w = sqrt(r4.w);
  // r4.z = -r4.x;
  // r4.x = dot(r4.yz, r4.yz);
  // r4.x = rsqrt(r4.x);
  // r4.xy = r4.yz * r4.xx;
  // // r3.y = dot(r4.xy, r3.yz);
  // // r3.y = r3.w ? r4.w : abs(r3.y);
  // // r3.y = r5.x ? r5.y : r3.y;
  // // r3.x = r0.w ? r3.x : r3.y;
  
  // // debating if removing this is worth
  // // basically small bush moves when you are close to it
  // r3.y = cmp(r2.y < cb0[7].y);
  // r3.z = cmp(1 < r3.x);
  // r3.y = (int)r3.z | (int)r3.y;
  // if (r3.y == 0) {
    // r3.yz = cb5[r0.y+3].xz + -cb0[7].xz;
    // r3.w = dot(r3.yz, r3.yz);
    // r3.w = rsqrt(r3.w);
    // r4.xz = r3.yz * r3.ww;
    // r4.y = 0;
	// // mesh deform when close to a bush
    // // r3.x = min(1, r3.x);
    // // r3.x = 1 + -r3.x;
	// r3.x = min(0.7, r3.x);
    // r3.x = 0.7 + -r3.x;
    // r3.y = rsqrt(r3.x);
    // r3.y = 1 / r3.y;
    // r3.yzw = r4.xyz * r3.yyy;
    // r3.yzw = r3.yzw * cb0[6].www + r2.xyz;
    // r0.z = r3.x * r0.z;
    // r4.xyz = r4.xyz * r0.zzz;
    // r4.xyz = r4.xyz * cb0[6].www + r2.xyz;
    // r4.w = -r0.z * cb0[6].w + r4.y;
    // r2.xyz = r0.www ? r3.yzw : r4.xwz;
    // r1.w = v0.w;
    // r0.z = dot(r1.xyzw, r1.xyzw);
    // r0.z = sqrt(r0.z);
    // r3.xyzw = cb5[r0.y+5].xyzw * r2.yyyy;
    // r3.xyzw = cb5[r0.y+4].xyzw * r2.xxxx + r3.xyzw;
    // r3.xyzw = cb5[r0.y+6].xyzw * r2.zzzz + r3.xyzw;
    // r2.xyzw = cb5[r0.y+7].xyzw * r2.wwww + r3.xyzw;
    // r0.w = dot(r2.xyzw, r2.xyzw);
    // r0.w = rsqrt(r0.w);
    // r2.xyzw = r2.xyzw * r0.wwww;
    // r1.xyzw = r2.xyzw * r0.zzzz;
  // } else {
    // r1.w = v0.w;
  // }
  // r2.xz = float2(-0,-0);
  // r2.y = -cb0[13].w;
  // r2.xyz = r2.xyz + r1.xyz;
  // // r0.z = dot(r2.xyz, r2.xyz);
  // // r0.z = rsqrt(r0.z);
  // r2.xyz = r2.xyz * r0.zzz + -v2.xyz;
  // r2.xyz = cb0[13].zzz * r2.xyz + v2.xyz;
  // r3.xyzw = cb5[r0.y+1].xyzw * r1.yyyy;
  // r3.xyzw = cb5[r0.y+0].xyzw * r1.xxxx + r3.xyzw;
  // r3.xyzw = cb5[r0.y+2].xyzw * r1.zzzz + r3.xyzw;
  // r4.xyzw = cb5[r0.y+3].xyzw + r3.xyzw;
  // r1.xyz = cb3[10].xyz * r4.yyy;
  // r1.xyz = cb3[9].xyz * r4.xxx + r1.xyz;
  // r1.xyz = cb3[11].xyz * r4.zzz + r1.xyz;
  // o6.xyz = cb3[12].xyz * r4.www + r1.xyz;
  // r5.xyzw = cb3[18].xyzw * r4.yyyy;
  // r5.xyzw = cb3[17].xyzw * r4.xxxx + r5.xyzw;
  // r5.xyzw = cb3[19].xyzw * r4.zzzz + r5.xyzw;
  // o0.xyzw = cb3[20].xyzw * r4.wwww + r5.xyzw;
  // o1.xy = v3.xy * cb0[19].xy + cb0[19].zw;
  // o1.zw = v3.xy * cb0[20].xy + cb0[20].zw;
  // r1.xyz = cb5[r0.y+3].xyz * r1.www + r3.xyz;
  // r3.x = dot(r2.xyz, cb5[r0.y+4].xyz);
  // r3.y = dot(r2.xyz, cb5[r0.y+5].xyz);
  // r3.z = dot(r2.xyz, cb5[r0.y+6].xyz);
  // r0.z = dot(r3.xyz, r3.xyz);
  // r0.z = rsqrt(r0.z);
  // r2.xyzw = r3.xyzz * r0.zzzz;
  // r3.xyz = cb5[r0.y+1].yzx * v1.yyy;
  // r3.xyz = cb5[r0.y+0].yzx * v1.xxx + r3.xyz;
  // r3.xyz = cb5[r0.y+2].yzx * v1.zzz + r3.xyz;
  // r0.z = dot(r3.xyz, r3.xyz);
  // r0.z = rsqrt(r0.z);
  // r3.xyz = r3.xyz * r0.zzz;
  // r0.z = cb2[9].w * v1.w;
  // r4.xyz = r3.xyz * r2.wxy;
  // r4.xyz = r2.ywx * r3.yzx + -r4.xyz;
  // r4.xyz = r4.xyz * r0.zzz;
  // r5.xyzw = r2.xyzw * r2.ywzx;
  
  // // to avoid dynamicindexed
  // // 7 + 3, 7 + 4 and so on.
  // // r0.x = (int)r0.x * 7;
  // // r6.x = dot(cb6[r0.x+3].xyzw, r5.xyzw);
  // // r6.y = dot(cb6[r0.x+4].xyzw, r5.xyzw);
  // // r6.z = dot(cb6[r0.x+5].xyzw, r5.xyzw);
  
  // // r0.x = (int)r0.x * 7;
  // r6.x = cb6[7+3].xyzw * r5.xyzw;
  // r6.y = cb6[7+4].xyzw * r5.xyzw;
  // r6.z = cb6[7+5].xyzw * r5.xyzw;
  
  // r0.z = r2.y * r2.y;
  // r0.z = r2.x * r2.x + -r0.z;
  // // o9.xyz = cb6[r0.x+6].xyz * r0.zzz + r6.xyz;
  // o9.xyz = cb6[7+6].xyz * r0.zzz + r6.xyz;
  // o2.x = r3.z;
  // o2.y = r4.x;
  // o2.z = r2.x;
  // o2.w = 0;//r1.x;
  // o3.x = 0;//r3.x;
  // o3.y = 0;//r4.y;
  // o3.z = r2.y;
  // o3.w = 0;//r1.y;
  // o4.x = 0;//r3.y;
  // o4.y = 0;//r4.z;
  // o4.z = r2.w;
  // o4.w = 0;//r1.z;
  // o8.xyzw = float4(0,0,0,0);
  // o7.xyz = cb5[r0.y+3].xyz;
  // o5.xy = float2(0,0);
  // o10.x = v8.x;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb6
// {
//
//   float4 cb6[14];                    // Offset:    0 Size:   224
//
// }
//
// cbuffer cb5
// {
//
//   float4 cb5[16];                    // Offset:    0 Size:   256
//
// }
//
// cbuffer cb4
// {
//
//   float4 cb4;                        // Offset:    0 Size:    16
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[21];                    // Offset:    0 Size:   336
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[10];                    // Offset:    0 Size:   160
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1;                        // Offset:    0 Size:    16
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[21];                    // Offset:    0 Size:   336
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
// cb1                               cbuffer      NA          NA            cb1      1 
// cb2                               cbuffer      NA          NA            cb2      1 
// cb3                               cbuffer      NA          NA            cb3      1 
// cb4                               cbuffer      NA          NA            cb4      1 
// cb5                               cbuffer      NA          NA            cb5      1 
// cb6                               cbuffer      NA          NA            cb6      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float   xyzw
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float    y  
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
// SV_InstanceID            0   x           8   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 8   xyzw        8     NONE   float   xyzw
// TEXCOORD                 9   xyz         9     NONE   float   xyz 
// SV_InstanceID            0   x          10     NONE    uint   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB6[14], immediateIndexed
dcl_constantbuffer CB5[16], dynamicIndexed
dcl_constantbuffer CB4[1], immediateIndexed
dcl_constantbuffer CB3[21], immediateIndexed
dcl_constantbuffer CB2[10], immediateIndexed
dcl_constantbuffer CB1[1], immediateIndexed
dcl_constantbuffer CB0[21], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyz
dcl_input v3.xy
dcl_input v4.y
dcl_input_sgv v8.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xy
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyzw
dcl_output o9.xyz
dcl_output o10.x
dcl_temps 8
iadd r0.x, v8.x, cb4[0].x
itof r0.x, r0.x
ftou r0.x, r0.x
ishl r0.x, r0.x, l(3)
utof r0.y, r0.x
div_sat r0.z, v0.y, cb0[5].x
mov_sat r0.w, v4.y
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[9].w
movc r0.z, r1.x, r0.w, r0.z
mul r0.w, r0.z, r0.z
add r2.xyzw, r0.yyyy, l(5.000000, 4.000000, 6.000000, 3.000000)
ftou r2.xyzw, r2.xyzw
mul r1.yzw, cb0[16].yyyy, cb5[r2.x + 0].xxyz
mad r1.yzw, cb5[r2.y + 0].xxyz, cb0[16].xxxx, r1.yyzw
mad r1.yzw, cb5[r2.z + 0].xxyz, cb0[16].zzzz, r1.yyzw
mad r3.x, cb0[16].w, l(0.500000), l(0.500000)
mul r3.xy, r3.xxxx, cb0[5].ywyy
mul r3.zw, r3.xxxy, cb1[0].xxxx
mad r3.x, cb1[0].x, r3.x, cb5[r2.w + 0].x
sincos r3.x, null, r3.x
mul r4.xyz, r1.yzwy, r3.xxxx
mad r3.x, r3.z, l(0.612340), cb5[r2.w + 0].z
sincos r3.x, null, r3.x
mul r4.xyz, r3.xxxx, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[5].zzzz
mul r4.xyz, r0.wwww, r4.xyzx
mul r1.yzw, r1.yyzw, cb0[5].zzzz
mul r1.yzw, r0.wwww, r1.yyzw
mul r1.yzw, r1.yyzw, cb0[16].wwww
mul r1.yzw, r1.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
mad r1.yzw, r4.xxyz, cb0[16].wwww, r1.yyzw
mul r4.xyz, cb0[17].yyyy, cb5[r2.x + 0].xyzx
mad r4.xyz, cb5[r2.y + 0].xyzx, cb0[17].xxxx, r4.xyzx
mad r4.xyz, cb5[r2.z + 0].xyzx, cb0[17].zzzz, r4.xyzx
mad r3.x, cb0[17].w, l(0.500000), l(0.500000)
mul r3.xz, r3.xxxx, cb0[5].yywy
mul r5.xy, r3.xzxx, cb1[0].xxxx
mad r3.x, cb1[0].x, r3.x, cb5[r2.w + 0].x
sincos r3.x, null, r3.x
mul r6.xyz, r3.xxxx, r4.xyzx
mad r3.x, r5.x, l(0.612340), cb5[r2.w + 0].z
sincos r3.x, null, r3.x
mul r5.xzw, r3.xxxx, r6.xxyz
mul r5.xzw, r5.xxzw, cb0[5].zzzz
mul r5.xzw, r0.wwww, r5.xxzw
mul r4.xyz, r4.xyzx, cb0[5].zzzz
mul r4.xyz, r0.wwww, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[17].wwww
mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r4.xyz, r5.xzwx, cb0[17].wwww, r4.xyzx
add r4.xyz, -r1.yzwy, r4.xyzx
mad r1.yzw, cb0[18].xxxx, r4.xxyz, r1.yyzw
dp3 r0.w, v0.xyzx, v0.xyzx
sqrt r0.w, r0.w
add r1.yzw, r1.yyzw, v0.xxyz
dp3 r3.x, r1.yzwy, r1.yzwy
rsq r3.x, r3.x
mul r1.yzw, r1.yyzw, r3.xxxx
mul r4.xy, v0.xzxx, l(10.000000, 10.000000, 0.000000, 0.000000)
dp2 r3.x, v0.xzxx, v0.xzxx
sqrt r3.x, r3.x
add r3.x, r3.x, -cb0[6].y
add r4.z, -cb0[6].y, cb0[6].z
div_sat r3.x, r3.x, r4.z
mad r5.xzw, cb1[0].xxxx, r3.yyyy, r4.xxyy
mad r5.xzw, v0.yyxy, l(10.000000, 0.000000, 10.000000, 10.000000), r5.xxzw
sincos r5.xzw, null, r5.xxzw
mad r3.y, r3.w, l(0.612340), r4.x
mad r3.y, v0.y, l(10.000000), r3.y
sincos r3.y, null, r3.y
mul r3.yw, r3.yyyy, r5.xxxw
mul r6.xz, r3.yywy, cb0[6].xxxx
mul r6.y, r5.z, cb0[6].x
mul r5.xzw, r3.xxxx, r6.xxyz
mul r5.xzw, r5.xxzw, cb0[16].wwww
mul r5.xzw, r5.xxzw, l(0.100000, 0.000000, 0.050000, 0.100000)
mul r6.xyz, r0.zzzz, r5.xzwx
movc r5.xzw, r1.xxxx, r6.xxyz, r5.xxzw
mad r3.yzw, cb1[0].xxxx, r3.zzzz, r4.xxyy
mad r3.yzw, v0.yyxy, l(0.000000, 10.000000, 10.000000, 10.000000), r3.yyzw
sincos r3.yzw, null, r3.yyzw
mad r4.x, r5.y, l(0.612340), r4.x
mad r4.x, v0.y, l(10.000000), r4.x
sincos r4.x, null, r4.x
mul r3.yw, r3.yyyw, r4.xxxx
mul r3.yzw, r3.yyzw, cb0[6].xxxx
mul r4.xyz, r3.xxxx, r3.yzwy
mul r3.xyz, r4.xyzx, cb0[17].wwww
mul r3.xyz, r3.xyzx, l(0.100000, 0.050000, 0.100000, 0.000000)
mul r4.xyz, r0.zzzz, r3.xyzx
movc r3.xyz, r1.xxxx, r4.xyzx, r3.xyzx
add r3.xyz, -r5.xzwx, r3.xyzx
mad r3.xyz, cb0[18].xxxx, r3.xyzx, r5.xzwx
mad r1.xyz, r1.yzwy, r0.wwww, r3.xyzx
add r3.xy, r0.yyyy, l(1.000000, 2.000000, 0.000000, 0.000000)
ftou r3.xy, r3.xyxx
mul r4.xyzw, r1.yyyy, cb5[r3.x + 0].xyzw
mad r4.xyzw, cb5[r0.x + 0].xyzw, r1.xxxx, r4.xyzw
mad r4.xyzw, cb5[r3.y + 0].xyzw, r1.zzzz, r4.xyzw
mad r4.xyzw, cb5[r2.w + 0].xyzw, v0.wwww, r4.xyzw
add r5.xyz, cb0[7].xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
add r5.xyz, -r4.xyzx, r5.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
lt r3.z, r4.y, cb0[7].y
lt r3.w, l(1.000000), r0.w
or r3.z, r3.z, r3.w
itof r3.z, r3.z
eq r3.z, r3.z, l(0.000000)
if_nz r3.z
  lt r3.z, l(0.500000), cb0[14].z
  add r5.xy, -cb0[7].xzxx, cb5[r2.w + 0].xzxx
  dp2 r3.w, r5.xyxx, r5.xyxx
  rsq r3.w, r3.w
  mul r5.xz, r3.wwww, r5.xxyx
  min r0.w, r0.w, l(0.700000)
  add r0.w, -r0.w, l(0.700000)
  rsq r3.w, r0.w
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  mov r5.y, cb0[6].w
  mul r6.xyz, r3.wwww, r5.xyzx
  mov r7.xz, cb0[6].wwww
  mov r7.y, l(0)
  mad r6.xyz, r6.xyzx, r7.xyzx, r4.xyzx
  mul r0.w, r0.z, r0.w
  mul r5.xyz, r0.wwww, r5.xyzx
  mad r5.xyz, r5.xyzx, r7.xyzx, r4.xyzx
  mad r5.w, -r0.w, cb0[6].w, r5.y
  movc r4.xyz, r3.zzzz, r6.xyzx, r5.xwzx
  mov r1.w, v0.w
  dp4 r0.w, r1.xyzw, r1.xyzw
  sqrt r0.z, r0.w
  mul r5.xyzw, r4.yyyy, cb5[r2.x + 0].xyzw
  mad r5.xyzw, cb5[r2.y + 0].xyzw, r4.xxxx, r5.xyzw
  mad r5.xyzw, cb5[r2.z + 0].xyzw, r4.zzzz, r5.xyzw
  add r0.y, r0.y, l(7.000000)
  ftou r0.y, r0.y
  mad r4.xyzw, cb5[r0.y + 0].xyzw, r4.wwww, r5.xyzw
  dp4 r0.y, r4.xyzw, r4.xyzw
  rsq r0.y, r0.y
  mul r4.xyz, r0.yyyy, r4.xyzx
  mul r1.xyz, r0.zzzz, r4.xyzx
endif 
mov r4.xz, r1.xxzx
add r4.y, r1.y, -cb0[13].w
mad r0.yzw, r4.xxyz, r0.zzzz, -v2.xxyz
mad r0.yzw, cb0[13].zzzz, r0.yyzw, v2.xxyz
mul r1.xyzw, r1.yyyy, cb5[r3.x + 0].xyzw
mad r1.xyzw, cb5[r0.x + 0].xyzw, r4.xxxx, r1.xyzw
mad r1.xyzw, cb5[r3.y + 0].xyzw, r4.zzzz, r1.xyzw
add r1.xyzw, r1.xyzw, cb5[r2.w + 0].xyzw
mul r4.xyz, r1.yyyy, cb3[10].xyzx
mad r4.xyz, cb3[9].xyzx, r1.xxxx, r4.xyzx
mad r4.xyz, cb3[11].xyzx, r1.zzzz, r4.xyzx
mad o6.xyz, cb3[12].xyzx, r1.wwww, r4.xyzx
mul r4.xyzw, r1.yyyy, cb3[18].xyzw
mad r4.xyzw, cb3[17].xyzw, r1.xxxx, r4.xyzw
mad r4.xyzw, cb3[19].xyzw, r1.zzzz, r4.xyzw
mad o0.xyzw, cb3[20].xyzw, r1.wwww, r4.xyzw
mad o1.xy, v3.xyxx, cb0[19].xyxx, cb0[19].zwzz
mad o1.zw, v3.xxxy, cb0[20].xxxy, cb0[20].zzzw
dp3 r1.x, r0.yzwy, cb5[r2.y + 0].xyzx
dp3 r1.y, r0.yzwy, cb5[r2.x + 0].xyzx
dp3 r1.z, r0.yzwy, cb5[r2.z + 0].xyzx
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.y, r0.y
mul r1.xyz, r0.yyyy, r1.xyzx
mul r0.yzw, v1.yyyy, cb5[r3.x + 0].yyzx
mad r0.xyz, cb5[r0.x + 0].yzxy, v1.xxxx, r0.yzwy
mad r0.xyz, cb5[r3.y + 0].yzxy, v1.zzzz, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, v1.w, cb2[9].w
mul r0.x, r1.z, r0.x
mad r0.x, r0.y, r1.y, -r0.x
mul o2.y, r0.w, r0.x
mul r0.xy, r1.yyyy, r1.xyxx
mul r2.x, r0.x, cb6[10].x
mul r2.y, r0.x, cb6[11].x
mul r2.z, r0.x, cb6[12].x
mad r0.x, r1.x, r1.x, -r0.y
mad o9.xyz, cb6[13].xyzx, r0.xxxx, r2.xyzx
mov o2.x, r0.z
mov o2.z, r1.x
mov o2.w, l(0)
mov r1.w, l(0)
mov o3.xyzw, r1.wwyw
mov o4.xyzw, r1.wwzw
mov o8.xyzw, l(0,0,0,0)
mov o7.xyz, cb5[r2.w + 0].xyzx
mov o5.xy, l(0,0,0,0)
mov o10.x, v8.x
ret 
// Approximately 193 instruction slots used
