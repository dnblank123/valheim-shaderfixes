// // vs creature
// cbuffer cb3 : register(b3)
// {
  // float4 cb3[21];
// }

// cbuffer cb2 : register(b2)
// {
  // float4 cb2[10];
// }

// cbuffer cb1 : register(b1)
// {
  // float4 cb1[46];
// }

// cbuffer cb0 : register(b0)
// {
  // float4 cb0[14];
// }

// void main(
  // float4 v0 : POSITION0,
  // float4 v1 : TANGENT0,
  // float3 v2 : NORMAL0,
  // float4 v3 : TEXCOORD0,
  // float4 v4 : TEXCOORD1,
  // float4 v5 : TEXCOORD2,
  // float4 v6 : TEXCOORD3,
  // float4 v7 : COLOR0,
  // out float4 o0 : SV_POSITION0,
  // out float4 o1 : TEXCOORD0,
  // out float4 o2 : TEXCOORD1,
  // out float4 o3 : TEXCOORD2,
  // out float4 o4 : TEXCOORD3,
  // out float4 o5 : TEXCOORD4,
  // out float4 o6 : TEXCOORD6,
  // out float3 o7 : TEXCOORD7)
// {
  // float4 r0,r1,r2,r3;
  // uint4 bitmask, uiDest;
  // float4 fDest;

  // r0.xyzw = cb2[1].xyzw * v0.yyyy;
  // r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  // r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  // r1.xyzw = cb2[3].xyzw + r0.xyzw;
  // r0.xyz = cb2[3].xyz * v0.www + r0.xyz;
  // r2.xyzw = cb3[18].xyzw * r1.yyyy;
  // r2.xyzw = cb3[17].xyzw * r1.xxxx + r2.xyzw;
  // r2.xyzw = cb3[19].xyzw * r1.zzzz + r2.xyzw;
  // o0.xyzw = cb3[20].xyzw * r1.wwww + r2.xyzw;
  // o1.xy = v3.xy * cb0[13].xy + cb0[13].zw;
  // o2.w = r0.x;
  // r1.xyz = cb2[1].yzx * v1.yyy;
  // r1.xyz = cb2[0].yzx * v1.xxx + r1.xyz;
  // r1.xyz = cb2[2].yzx * v1.zzz + r1.xyz;
  // r0.x = dot(r1.xyz, r1.xyz);
  // r0.x = rsqrt(r0.x);
  // r1.xyz = r1.xyz * r0.xxx;
  // o2.x = r1.z;
  // r2.x = dot(v2.xyz, cb2[4].xyz);
  // r2.y = dot(v2.xyz, cb2[5].xyz);
  // r2.z = dot(v2.xyz, cb2[6].xyz);
  // r0.x = dot(r2.xyz, r2.xyz);
  // r0.x = rsqrt(r0.x);
  // r2.xyzw = r2.xyzz * r0.xxxx;
  // // r3.xyz = r2.wxy * r1.xyz;
  // // r3.xyz = r2.ywx * r1.yzx + -r3.xyz;
  // // r0.x = cb2[9].w * v1.w;
  // // r3.xyz = r3.xyz * r0.xxx;
  // // o2.y = r3.x;
  // o2.z = r2.x;
  // // o3.x = r1.x;
  // o4.x = r1.y;
  // // o3.w = r0.y;
  // // o4.w = r0.z;
  // // o3.y = r3.y;
  // // o4.y = r3.z;
  // o3.z = r2.y;
  // o4.z = r2.w;
  // // o5.xyz = v0.xyz;
  // // o6.xyzw = float4(0,0,0,0);
  // // r0.x = r2.y * r2.y;
  // // r0.x = r2.x * r2.x + -r0.x;
  // // r1.xyzw = r2.xyzw * r2.ywzx;
  // // r2.x = dot(cb1[42].xyzw, r1.xyzw);
  // // r2.y = dot(cb1[43].xyzw, r1.xyzw);
  // // r2.z = dot(cb1[44].xyzw, r1.xyzw);
  // // o7.xyz = cb1[45].xyz * r0.xxx + r2.xyz;
  // return;
// }

//
// Generated by Microsoft (R) HLSL Shader Compiler 10.0.10011.16384
//
//
// Buffer Definitions: 
//
// cbuffer cb3
// {
//
//   float4 cb3[21];                    // Offset:    0 Size:   336
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[10];                    // Offset:    0 Size:   160
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[14];                    // Offset:    0 Size:   224
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// cb0                               cbuffer      NA          NA            cb0      1 
// cb2                               cbuffer      NA          NA            cb2      1 
// cb3                               cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float       
// TEXCOORD                 2   xyzw        5     NONE   float       
// TEXCOORD                 3   xyzw        6     NONE   float       
// COLOR                    0   xyzw        7     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   x zw
// TEXCOORD                 2   xyzw        3     NONE   float     z 
// TEXCOORD                 3   xyzw        4     NONE   float   x z 
// TEXCOORD                 4   xyzw        5     NONE   float       
// TEXCOORD                 6   xyzw        6     NONE   float       
// TEXCOORD                 7   xyz         7     NONE   float       
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[21], immediateIndexed
dcl_constantbuffer CB2[7], immediateIndexed
dcl_constantbuffer CB0[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xzw
dcl_output o3.z
dcl_output o4.xz
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb2[1].xyzw
mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
add r1.xyzw, r0.xyzw, cb2[3].xyzw
mad r0.z, cb2[3].x, v0.w, r0.x
mul r2.xyzw, r1.yyyy, cb3[18].xyzw
mad r2.xyzw, cb3[17].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb3[19].xyzw, r1.zzzz, r2.xyzw
mad o0.xyzw, cb3[20].xyzw, r1.wwww, r2.xyzw
mad o1.xy, v3.xyxx, cb0[13].xyxx, cb0[13].zwzz
mul r1.xyz, v1.yyyy, cb2[1].yzxy
mad r1.xyz, cb2[0].yzxy, v1.xxxx, r1.xyzx
mad r1.xyz, cb2[2].yzxy, v1.zzzz, r1.xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
rsq r1.x, r1.x
mul r0.xy, r1.xxxx, r1.yzyy
dp3 r1.x, v2.xyzx, cb2[4].xyzx
dp3 r1.y, v2.xyzx, cb2[5].xyzx
dp3 r1.z, v2.xyzx, cb2[6].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mov r0.w, r1.x
mov o2.xzw, r0.yywz
mov r1.w, r0.x
mov o4.xz, r1.wwzw
mov o3.z, r1.y
ret 
// Approximately 28 instruction slots used
